(ns wits.blog.views
  (:use hiccup.element
        [hiccup.util :only [escape-html]]
        [hiccup.page :only [html5 include-css include-js]]
        [wits.web.html :only [sections html->hiccup html->enlive]]
        [wits.blog.core :only [blog->url]]
        [markdown.core :only [md-to-html-string]]
        [wits.util :only [-#> -#>>]])
  (:require [markdown.core :as md]
            [wits.web.pages :as pages]
            [wits.web.html :as html]
            [wits.web.pjax :as pjax]))

(defn add-code-tags
  "The stuff generated by markdown doesn't explicitly label the code sections.
   Thus, it needs to be added manually so we can style it."
  [content]
  (map
    (fn [el]
      (if (html/tagged? :pre el)
        [:div.code-block el]
        el))
    content))

(defn prepare-blog-content
  [content]
  (-> content
    md-to-html-string
    html->hiccup
    add-code-tags))

(defn blog-view
  "Creates a Hiccup structure for a blog view."
  [{:keys [title date content]}]
  [:div.blog
   (sections
     :title title
     :date date
     :content content)])

(defn full-blog
  "Creates a view of a full blog."
  [blog]
  (-> blog
    (update-in [:content] prepare-blog-content)
    blog-view))

(defn truncate-by-paragraphs
  "Returns the blog contents truncated to some number of paragraphs"
  [blog-content number-of-paragraphs]
  (->>
    blog-content
    (filter (-#> html/tag (= :p)))
    (take number-of-paragraphs)))

(defn blog-preview
  "Creates a view of a preview of a blog for the blog roll."
  [blog]
  (-> blog
    (update-in [:content] prepare-blog-content)
    (update-in [:content] truncate-by-paragraphs 3)
    (update-in [:title] pjax/wrap-in-pjax-link (str "/blog/entries/" (blog->url blog)))
    blog-view))

(def blog-css
  ["/css/blog.css"
   "/css/lib/syntax-highlighter/themes/witsTheme.css"])

(def blog-js
  ["/js/lib/syntax-highlighter/brushes/shBrushClojure.js"])

(def blog-page
  {:css
   blog-css

   :js
   blog-js})

(defn blog-roll
  [blogs pjax?]
  (pjax/page
    pages/main pjax?
    (merge
      blog-page
      {:title "Blog"
       :content
       (->> blogs
         (map blog-preview)
         (interpose [:div.blog-separator]))})))

(defn blog-entry
  [blog pjax?]
  (pjax/page
    pages/main pjax?
    (merge
      blog-page
      {:title (blog :title)
       :content (full-blog blog)

       ; I should really move this into an external script
       ; but whatever #WorstDev
       :script
       "$(function() {
          SyntaxHighlighter.highlight();
       });"})))
